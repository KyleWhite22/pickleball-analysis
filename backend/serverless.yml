service: pickle-api

params:
  dev:
    COGNITO_ISSUER_URL: https://cognito-idp.us-east-2.amazonaws.com/us-east-2_wvWmECk8W
    COGNITO_APP_CLIENT_ID: 5srl4gktjb9bvkm3n32c1ld
  prod:
    COGNITO_ISSUER_URL: https://cognito-idp.us-east-2.amazonaws.com/us-east-2_wvWmECk8W
    COGNITO_APP_CLIENT_ID: 5srl4gktjb9bvkm3np3n32c1ld"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  environment:
    TABLE_NAME: !Ref PickleballTable

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:DeleteItem
            - dynamodb:TransactWriteItems
          Resource:
            - !GetAtt PickleballTable.Arn
            - !Sub '${PickleballTable.Arn}/index/*'
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:5173
        - https://pickle.kyle-white.com
      allowedHeaders:
        - Authorization
        - Content-Type
      allowedMethods:
        - GET
        - POST
        - DELETE
        - OPTIONS
        - PATCH
    authorizers:
      jwtAuth:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: ${param:COGNITO_ISSUER_URL}
        audience:
          - ${param:COGNITO_APP_CLIENT_ID}  
functions:
  listLeagues:
    handler: src/leagues_list.handler
    events:
      - httpApi:
          path: /leagues
          method: GET
          authorizer: jwtAuth

  createLeague:
    handler: src/leagues_create.handler
    events:
      - httpApi:
          path: /leagues
          method: POST
          authorizer: jwtAuth

  listMatches:
    handler: src/matches_list.handler
    events:
      - httpApi:
          path: /leagues/{id}/matches
          method: GET

  createMatch:
    handler: src/matches_create.handler
    events:
      - httpApi:
          path: /leagues/{id}/matches
          method: POST
          authorizer: jwtAuth

  getMetrics:
    handler: src/metrics_get.handler
    events:
      - httpApi:
          path: /leagues/{id}/metrics
          method: GET
  
  joinByCode:
    handler: src/join_by_code.handler
    events:
      - httpApi:
          path: /join/{code}
          method: POST
          
  getStandings:
    handler: src/standings_get.handler
    events:
      - httpApi:
          path: /leagues/{id}/standings
          method: GET

  playersList:
    handler: src/players_list.handler
    events:
      - httpApi:
          path: /leagues/{id}/players
          method: GET

  deleteLastMatch:
    handler: src/matches_delete_last.handler
    events:
      - httpApi:
          path: /leagues/{id}/matches/last
          method: DELETE
          authorizer: jwtAuth

  getLeague:
    handler: src/league_get.handler
    events:
      - httpApi:
          path: /leagues/{id}
          method: GET

  renameLeague:
    handler: src/league_rename.handler
    events:
      - httpApi:
          path: /leagues/{id}
          method: PATCH
          authorizer: jwtAuth

  rotateInvite:
    handler: src/league_invite_rotate.handler
    events:
      - httpApi:
          path: /leagues/{id}/invite:rotate
          method: POST
          authorizer: jwtAuth

  publicLeagues:
    handler: src/leagues_public_list.handler
    events:
      - httpApi:
          path: /leagues/public
          method: GET
package:
  patterns:
    - src/**
    - '!node_modules/**'

resources:
  Conditions:
    IsProd:
      Fn::Equals:
        - ${sls:stage}
        - prod

  Resources:
    ApiApiMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      Condition: IsProd
      DependsOn: HttpApiStage 
      Properties:
        ApiId: !Ref HttpApi
        DomainName: api.pickle.kyle-white.com   #
        Stage: !Ref HttpApiStage                    
    
    PickleballTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pickleball-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
          - AttributeName: GSI2PK
            AttributeType: S
          - AttributeName: GSI2SK
            AttributeType: S
          - AttributeName: GSI3PK
            AttributeType: S
          - AttributeName: GSI3SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI2
            KeySchema:
              - AttributeName: GSI2PK
                KeyType: HASH
              - AttributeName: GSI2SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI3
            KeySchema:
              - AttributeName: GSI3PK
                KeyType: HASH
              - AttributeName: GSI3SK
                KeyType: RANGE
            Projection: { ProjectionType: ALL }